#!/usr/bin/env python3# This file is used to filter and convert the training data of the UB-PMC-Line-class dataset into a Chart-OCR compatible version.# This file specifically deals with Classification model of Chart-OCR# Make sure to changes the paths according to your settings.# This file assumes the availability of UB-PMC training data in a folder named "data" in the current directory.# So, just place the UB-PMC Training folder in the current directory and re-name it to "data".import jsonimport osimport numpy as npimport osfrom PIL import Imagetry:    os.mkdir("./pmc_cls")    os.mkdir("./pmc_cls/train2019")except:    print("No Directory created")training_data_list = []folder_opt = ['vertical_box','line','scatter', 'horizontal_bar','vertical_bar']type_opt = ['boxplots','lines','scatter points', 'horizontal_bar','vertical_bar']id_cnt = 0bbox_cnt = 0json_d = {}json_d["licenses"] = []images = []annotations = []annotations_r = []for folder in os.listdir('./data/images/'):    #print(folder)    if folder == ".DS_Store":        continue            if folder in folder_opt:                  for file in os.listdir('./data/images/' + folder):                                                with open('./data/json/' + folder + '/' + os.path.splitext(file)[0] + '.json') as f:              data = json.load(f)                            if 'task6' in data and data['task6'] != None:                                                print(file)                  file_dir = './data/images/' + folder + '/' + file                  img = Image.open(file_dir)                  w, h = img.size                                    gt_type = data['task1']['output']['chart_type']                                    if 'bar' in gt_type.lower():                      dtype = 0                  elif 'line' in gt_type.lower():                      dtype = 1                      print("line")                  elif 'scatter' in gt_type.lower():                      dtype = 1                      print("scatter")                  elif 'box' in gt_type.lower():                      dtype = 1                      print("box")                  else:                      continue                                                                           file_dict = {"file_name": file, "height": h, "width": w, "id": id_cnt, "data_type": dtype, "offset": 100}                  #id_cnt += 1                                   try:                      bb = data['task6']['input']['task4_output']['_plot_bb']                      bbox_cls = []                                            if bb != [] and dtype != None:                          img.save('./pmc_cls/train2019/'+ file)                          images.append(file_dict)                          id_cnt += 1                                                    bbox_cls = [bb['x0'],bb['y0'],bb['width'],bb['height']]                                                    bbox_dict = {"image_id": id_cnt-1, "category_id": 5, "bbox": bbox_cls, "area": bb['width']*bb['height'], "id": bbox_cnt}                          bbox_cnt += 1                          annotations.append(bbox_dict)                      else:                          continue                                        except:                      continue                                                                json_d["images"] = imagesjson_d["annotations"] = annotationsjson_d["categories"] = [{"supercategory": "Legend", "id": 0, "name": "Legend"}, {"supercategory": "ValueAxisTitle", "id": 1, "name": "ValueAxisTitle"}, {"supercategory": "ChartTitle", "id": 2, "name": "ChartTitle"}, {"supercategory": "CategoryAxisTitle", "id": 3, "name": "CategoryAxisTitle"}, {"supercategory": "PlotArea", "id": 4, "name": "PlotArea"}, {"supercategory": "InnerPlotArea", "id": 5, "name": "InnerPlotArea"}]with open('./pmc_cls/instancesCls(1031)_train2019.json', 'w+') as outfile:    json.dump(json_d, outfile)                                    